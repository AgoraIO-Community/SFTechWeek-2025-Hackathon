"use client";

import React, { useState, useEffect } from "react";

/**
 * ExcalidrawScene interface matching the output from DiagramGenerator
 * in @principal-ade/ai-brain
 */
export interface ExcalidrawScene {
  type: "excalidraw";
  version: number;
  source: string;
  elements: any[]; // Using any to avoid complex Excalidraw type imports
  appState: {
    gridSize: number | null;
    viewBackgroundColor: string;
    [key: string]: any;
  };
  files?: Record<string, unknown>;
}

interface ExcalidrawViewerProps {
  diagram: ExcalidrawScene;
  theme?: "light" | "dark";
  height?: string;
  className?: string;
}

/**
 * Simple read-only Excalidraw viewer for displaying LLM-generated diagrams
 *
 * This component is designed to display diagrams generated by the DiagramGenerator
 * service from the core package. It renders diagrams in read-only mode by default.
 *
 * Uses dynamic import to avoid SSR issues with Excalidraw's browser dependencies.
 *
 * @example
 * ```tsx
 * <ExcalidrawViewer
 *   diagram={diagramData}
 *   theme="dark"
 *   height="600px"
 * />
 * ```
 */
export const ExcalidrawViewer: React.FC<ExcalidrawViewerProps> = ({
  diagram,
  theme = "light",
  height = "500px",
  className = "",
}) => {
  const [Excalidraw, setExcalidraw] = useState<any>(null);

  useEffect(() => {
    // Dynamically import Excalidraw only on the client side
    import("@excalidraw/excalidraw").then((module) => {
      setExcalidraw(() => module.Excalidraw);
    });
  }, []);

  // Show loading state while Excalidraw loads
  if (!Excalidraw) {
    return (
      <div
        style={{
          height,
          width: "100%",
          border: "1px solid #e5e7eb",
          borderRadius: "8px",
          overflow: "hidden",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          backgroundColor: theme === "dark" ? "#1f2937" : "#ffffff",
        }}
        className={className}
      >
        <div style={{ textAlign: "center", color: "#6b7280" }}>
          <div style={{ fontSize: "2rem", marginBottom: "0.5rem" }}>ðŸ“Š</div>
          <div>Loading diagram...</div>
        </div>
      </div>
    );
  }

  return (
    <div
      style={{
        height,
        width: "100%",
        border: "1px solid #e5e7eb",
        borderRadius: "8px",
        overflow: "hidden",
      }}
      className={className}
    >
      <Excalidraw
        initialData={{
          elements: diagram.elements,
          appState: {
            ...diagram.appState,
            viewBackgroundColor: theme === "dark" ? "#1f2937" : "#ffffff",
          },
          files: diagram.files || {},
        }}
        viewModeEnabled={true} // Read-only mode
        theme={theme}
        UIOptions={{
          canvasActions: {
            saveAsImage: true,
            export: {
              saveFileToDisk: true,
            },
          },
        }}
      />
    </div>
  );
};
